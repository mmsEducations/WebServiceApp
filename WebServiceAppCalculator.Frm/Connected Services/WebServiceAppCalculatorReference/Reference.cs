//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebServiceAppCalculatorReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebServiceAppCalculatorReference.WebServiceAppCalculatorSoap")]
    public interface WebServiceAppCalculatorSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> AddAsync(decimal s1, decimal s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Subtract", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> SubtractAsync(decimal s1, decimal s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiply", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal s1, decimal s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Divide", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> DivideAsync(decimal s1, decimal s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Exponentiation", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ExponentiationAsync(int s1, int s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FindMaxAndEqual", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> FindMaxAndEqualAsync(decimal s1, decimal s2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FindMinAndEqual", ReplyAction="*")]
        System.Threading.Tasks.Task<double> FindMinAndEqualAsync(double s1, double s2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface WebServiceAppCalculatorSoapChannel : WebServiceAppCalculatorReference.WebServiceAppCalculatorSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class WebServiceAppCalculatorSoapClient : System.ServiceModel.ClientBase<WebServiceAppCalculatorReference.WebServiceAppCalculatorSoap>, WebServiceAppCalculatorReference.WebServiceAppCalculatorSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WebServiceAppCalculatorSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WebServiceAppCalculatorSoapClient.GetBindingForEndpoint(endpointConfiguration), WebServiceAppCalculatorSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceAppCalculatorSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WebServiceAppCalculatorSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceAppCalculatorSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WebServiceAppCalculatorSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceAppCalculatorSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<decimal> AddAsync(decimal s1, decimal s2)
        {
            return base.Channel.AddAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<decimal> SubtractAsync(decimal s1, decimal s2)
        {
            return base.Channel.SubtractAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal s1, decimal s2)
        {
            return base.Channel.MultiplyAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<decimal> DivideAsync(decimal s1, decimal s2)
        {
            return base.Channel.DivideAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<int> ExponentiationAsync(int s1, int s2)
        {
            return base.Channel.ExponentiationAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<decimal> FindMaxAndEqualAsync(decimal s1, decimal s2)
        {
            return base.Channel.FindMaxAndEqualAsync(s1, s2);
        }
        
        public System.Threading.Tasks.Task<double> FindMinAndEqualAsync(double s1, double s2)
        {
            return base.Channel.FindMinAndEqualAsync(s1, s2);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebServiceAppCalculatorSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WebServiceAppCalculatorSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebServiceAppCalculatorSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:44306/WebServiceAppCalculator.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.WebServiceAppCalculatorSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:44306/WebServiceAppCalculator.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WebServiceAppCalculatorSoap,
            
            WebServiceAppCalculatorSoap12,
        }
    }
}
